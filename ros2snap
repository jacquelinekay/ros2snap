#!/bin/bash
# Create snappy package from a ROS package including the
# run dependencies of the corresponding package.
# Defaults to the distribution set by environment variable ROS_DISTRO, or
# "jade" if ROS_DISTRO is unset. You may specify another release
# using the command line option -d.
#
# The script should be launched from the root of the catkin overlay
# TODO add support for building arbitrary installed packages, not dependent on
# location
#
# (C) 2015 Erle Robotics S.L.
# Authors: VÃ­ctor Mayoral Vilches <victor@erlerobot.com>
#          Jackie Kay <jackie@osrfoundation.org>

# TODO current approach only works with one filesystem level (does not work
# with stacks)
# consider making subdirs of snappy_build to mirror catkin ws
# TODO check if replacing cp with symlink works (it should)

VERSION=1.0
DISTRO=$ROS_DISTRO
: $DISTRO=jade
USAGE="Usage: `basename $0` [-rvsh] <ros-pkg-name>"
SNAP=0

if [ $# -eq 0 ]
  then
    echo "ros2snap [-rvshd] <ros-pkg-name>"
    exit 1
fi

ROSNAME=$1

# TODO command line args not working
while getopts rvshd: OPT; do
    case "$OPT" in
        r)
            echo "compiling the ROS package"
            catkin_make_isolated --install --pkg $2
            ROSNAME=$2
            #exit 0
            ;;
        v)
            echo "`basename $0` version $VERSION"
            exit 0
            ;;
        s)
            SNAP=1
            ;;
        h)
            echo "Usage: `basename $0` [-rvsh] <ros-pkg-name>"
            echo "		-r: compile the ros package"
            echo "		-v: version"
            echo "		-s: create a snap"
            echo "		-h: show this help"
            exit 0
            ;;
        d)
          DISTRO=$2
          echo "Got distro: $DISTRO"
          ;;
        \?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
            ;;
    esac
done

ROSNAME_FINAL=$(echo $ROSNAME|sed 's/_/-/g')
echo $ROSNAME_FINAL

# add snappy metadata
mkdir -p snappy_build/meta
mkdir -p snappy_build/lib
mkdir -p snappy_build/bin
cp -r install/lib/* snappy_build/lib

PKG_DATA=$(cat src/$ROSNAME/package.xml)
SNAP_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" <<< "$PKG_DATA")
VENDOR_EMAIL=$(grep -oPm1 "(?<=<maintainer email=\")[^\"]+" <<< "$PKG_DATA")
#TODO vendor name

# Generate binary entries for all launch files
#BINARIES=" - name: bin/$ROSNAME_FINAL"
BINARIES=" - name: bin/$ROSNAME_FINAL-wrapper"
# TODO suppress error if no launchfiles found
for LAUNCHFILE in $(ls src/$ROSNAME/launch); do
 # how to add executable for launchfile?
 echo ". \$(dirname \$(dirname \$0))/opt/ros/$DISTRO/setup.bash\ roslaunch $ROSNAME $LAUNCHFILE" >> snappy_build/bin/$LAUNCHFILE

 BINARIES="$BINARIES
 - name: bin/$LAUNCHFILE"
done

# TODO: generate binary entries for:
# executables in bin and lib (?)
# scripts stored in share (?)

for BINFILE in $(ls install/bin); do
  cp install/bin/$BINFILE snappy_build/bin
  BINARIES="$BINARIES
 - name: bin/$BINFILE"
done

cat <<EOF > snappy_build/meta/package.yaml
name: $ROSNAME_FINAL
architecture: `dpkg --print-architecture`
version: $SNAP_VERSION
vendor: <$VENDOR_EMAIL>
binaries:
$BINARIES
EOF

cat <<EOF > snappy_build/meta/readme.md
ROS package autogenerated from ros2snap.
Automatically create a snap package from a ROS one.

https://github.com/erlerobot/ros2snap
EOF

# FIXME: add wrapper to make deb lib packages work from /apps/... (will be
# fixed once we do proper overlay mounting of /debs into the app ns)
cat <<EOF > snappy_build/bin/$ROSNAME_FINAL-wrapper
#!/bin/bash -e
mydir=\$(dirname \$(dirname \$0))
export PYTHONPATH=\$mydir/lib/python2.7/dist-packages:\$PYTHONPATH
export PATH=\$mydir/bin:\$PATH
export LD_LIBRARY_PATH=\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/opt/ros/$DISTRO/lib:/home/ubuntu/trusty/usr/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/usr/lib/:/home/ubuntu/trusty/opt/ros/$DISTRO/lib/:\$PYTHONPATH
export ROS_PACKAGE_PATH=\$mydir/share:\$mydir/stacks:\$ROS_PACKAGE_PATH
. \$mydir/opt/ros/$DISTRO/setup.bash
#rosrun $1 $1
\$mydir/lib/$ROSNAME/$1/$1
EOF
chmod 755 snappy_build/bin/$ROSNAME_FINAL


# Figure out run dependencies of the ROS package and add them
# TODO check error message from rosdep resolve
# TODO inject core dependencies? Still not sure which ones are needed
DEPS=$(cat src/$ROSNAME/package.xml | grep -v "<!" |  grep -oP '(?<=run_depend>)[^<]+')
for DEPNAME in $DEPS
do
  DEPNAME_FINAL=`rosdep resolve $DEPNAME | sed -n 2p`
  echo "Adding dependency $DEPNAME_FINAL"
	for f in `dpkg -L $DEPNAME_FINAL`;
	do [ -f $f ] || continue;
	 d=${f#/};
	 directorio=$(dirname $d| sed 's$opt/ros/'+$DISTRO'+/$$')

	 mkdir -p snappy_build/$directorio;
	 cp -a $f snappy_build/$directorio;
	 #echo "copying $f in snappy_build/$directorio"
	done
done

if [ $SNAP -eq 1 ]; then
	snappy build snappy_build
  # TODO check error code
  echo "Successfully built $1 snap"
fi
