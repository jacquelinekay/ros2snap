#!/bin/sh
# Create snappy package from a ROS package including the
# run dependencies of the corresponding package.
# Defaults to the distribution set by environment variable ROS_DISTRO, or
# "jade" if ROS_DISTRO is unset. You may specify another release
# using the command line option -d.
#
# The script should be launched from the root of the catkin overlay
#
# (C) 2015 Erle Robotics S.L.
# Author: VÃ­ctor Mayoral Vilches <victor@erlerobot.com>

VERSION=1.0
DISTRO=$ROS_DISTRO
: $DISTRO=jade
USAGE="Usage: `basename $0` [-rvsh] <ros-pkg-name>"
SNAP=0

if [ $# -eq 0 ]
  then
    echo "ros2snap [-rvshd] <ros-pkg-name>"
    exit 1
fi

ROSNAME=$1

while getopts rvshd: OPT; do
    case "$OPT" in
        r)
            echo "compiling the ROS package"
            catkin_make_isolated --install --pkg $2
            ROSNAME=$2
            #exit 0
            ;;
        v)
            echo "`basename $0` version $VERSION"
            exit 0
            ;;
        s)
            SNAP=1
            ;;
        h)
            echo "Usage: `basename $0` [-rvsh] <ros-pkg-name>"
            echo "		-r: compile the ros package"
            echo "		-v: version"
            echo "		-s: create a snap"
            echo "		-h: show this help"
            exit 0
            ;;
        d)
          DISTRO=$2
          echo "Got distro: $DISTRO"
          ;;
        \?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
            ;;
    esac
done

ROSNAME_FINAL=$(echo $ROSNAME|sed 's/_/-/g')
echo $ROSNAME_FINAL

# add snappy metadata
mkdir -p install_isolated/meta
PKG_DATA=$(cat src/$ROSNAME/package.xml)
SNAP_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" <<< "$PKG_DATA")
VENDOR_EMAIL=$(grep -oPm1 "(?<=<maintainer email=\")[^\"]+" <<< "$PKG_DATA")
#TODO vendor name

# Generate binary entries for all launch files
BINARIES=" - name: bin/$ROSNAME_FINAL"
for LAUNCHFILE in $(ls src/$ROSNAME/*.launch); do
  # Add a one-liner executable that invokes the launchfile in
  # install_isolated/bin/

  BINARIES="\n - name: bin/$LAUNCHFILE"
done

# TODO: get entries in bin and generate binary entries

cat <<EOF > install_isolated/meta/package.yaml
name: $ROSNAME_FINAL
architecture: `dpkg --print-architecture`
version: $SNAP_VERSION
vendor: $VENDOR <$VENDOR_EMAIL>
binaries:
$BINARIES
EOF

cat <<EOF > install_isolated/meta/readme.md
ROS package autogenerated from ros2snap.
Automatically create a snap package from a ROS one.

https://github.com/erlerobot/ros2snap
EOF

# FIXME: add wrapper to make deb lib packages work from /apps/... (will be
# fixed once we do proper overlay mounting of /debs into the app ns)
mkdir -p install_isolated/bin
cat <<EOF > install_isolated/bin/$ROSNAME_FINAL
#!/bin/bash -e
mydir=\$(dirname \$(dirname \$0))
export PYTHONPATH=\$mydir/lib/python2.7/dist-packages:\$PYTHONPATH
export PATH=\$mydir/bin:\$PATH
export LD_LIBRARY_PATH=\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/opt/ros/$DISTRO/lib:/home/ubuntu/trusty/usr/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/usr/lib/:/home/ubuntu/trusty/opt/ros/$DISTRO/lib/:\$PYTHONPATH
export ROS_PACKAGE_PATH=\$mydir/share:\$mydir/stacks:\$ROS_PACKAGE_PATH
. \$mydir/opt/ros/$DISTRO/setup.bash
#rosrun $1 $1
#\$mydir/lib/$1/$1
EOF
chmod 755 install_isolated/bin/$ROSNAME_FINAL


# Figure out run dependencies of the ROS package and add them
# TODO check error message from rosdep
DEPS=`rosdep keys $ROSNAME`
for DEPNAME in $DEPS
do
  # TODO differentiate ros and non-ros packages
  # TODO use dpkg to search for package with a substring? if full match, or if remainder of string is ros-indigo, choose it
  # ^ Use rosdep Python API
  DEPNAME_FINAL=$(echo $DEPNAME|sed 's/_/-/g')
  echo "Computing dependencies for $DEPNAME"
	for f in `dpkg -L ros-$DISTRO-$DEPNAME_FINAL`;
	do [ -f $f ] || continue;
	 d=${f#/};
	 directorio=$(dirname $d| sed 's$opt/ros/'+$DISTRO'+/$$')

	 mkdir -p install_isolated/$directorio;
	 cp -a $f install_isolated/$directorio;
	 #echo "copying $f in install_isolated/$directorio"
	done
done



if [ $SNAP -eq 1 ]; then
	snappy build install_isolated
  # TODO check error code
  echo "Successfully built $1 snap"
fi
